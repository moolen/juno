// Code generated by go-bindata.
// sources:
// ../../dist/tcptracer-sock-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerSockEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x4d\x6c\x1b\x45\x14\x7e\xfe\xab\xed\x34\x6d\xdc\x28\x06\xd7\xe5\x67\x4b\xe3\x2a\x80\xf2\xe3\xa4\x94\x10\x51\x54\x12\x85\x48\x28\xd0\x28\x6d\x68\xc4\x25\xac\xd7\x1b\x67\xe9\xc6\x71\xec\x35\x6d\x9a\x03\x54\xa8\xfc\xdc\xe0\xd0\x4b\x4f\xad\xc4\xa1\xdc\x80\x8b\xc3\xc9\x70\xeb\x8d\x1c\x7b\x41\xaa\x50\x0f\x39\x70\xe0\x98\x03\x92\x99\x37\xf3\xc6\xbb\x3b\xde\x38\x20\x71\x83\x91\xec\x37\xf3\xcd\x9b\xf7\x37\xef\xcd\x8c\xfd\xf1\xec\xfc\x5b\xe1\x50\x08\x64\x0b\xd1\x47\x6d\x7b\x7d\x6e\xff\x22\x7d\x27\x19\x67\xf3\x29\x81\x65\xd8\x22\xd3\x99\xd2\xb0\x9f\x2b\xf6\xc0\x76\xf6\x51\x4b\xe2\xa5\x0d\x87\xe3\x15\xdd\xb8\xb6\x9d\xdd\xe5\xb8\x6e\x2c\xf0\x75\xcd\xfb\x62\x7d\x9c\xf1\xed\xb6\x5a\xad\x46\x18\x20\xc5\xc6\xb7\xd9\xe7\x08\xf2\xe9\x82\x4f\x2f\xcc\x0b\xfe\x41\xe2\x8f\x02\x1c\x67\x74\x78\x60\x96\x8f\x37\x73\xbd\x82\x9e\x39\xc6\x69\x29\x02\x90\x60\xf4\xd2\x65\xc1\x9f\x8e\x84\xe0\x8b\x07\x00\x4b\x91\x17\xe1\x16\xca\xc9\x91\x9c\x18\x40\x3f\xca\x49\x9f\x15\xeb\x07\x53\x24\xe7\x84\x5f\xce\x8c\x94\x13\xe6\x72\x9a\x57\xc4\x78\x29\xf2\xbc\x90\xa7\x91\x3c\xf6\xc1\x90\xc8\xf9\xe1\xd4\x29\x92\x3b\x40\x72\xd3\xdd\xe5\x46\xa5\xdc\x81\x0e\x3b\xb3\xe0\xce\x0f\xa7\xc9\xce\xc1\x0c\xc9\x3d\xf9\x37\xed\x4d\x76\xd8\xfb\x9c\xcf\xde\x18\xc9\x7d\x86\xe4\x3e\x1b\x28\x57\xda\x71\x95\xe1\xad\x16\xea\x39\xcb\xe7\x1b\x09\xb1\x2f\xe9\xc8\x34\x7c\xf6\x2b\x80\x90\xc6\x70\xb6\xbf\x76\xbd\x07\x8c\xec\x5e\x3b\x2f\xb4\x9c\x5d\xc7\xbe\x36\xaa\xe5\xb6\xb3\x8f\xdb\xb8\xb3\xa6\x39\xd8\xdf\xaa\x98\x53\xde\x3c\xaa\x9a\x0e\xe7\xaf\x96\x35\x53\xe6\x51\x50\xfe\xa0\xe5\x0d\xb4\x2f\xe1\xe6\x51\x0c\x7e\x6b\xdb\x81\xad\x96\xfd\xbd\x25\xc7\x1a\x4b\x58\xaf\x5d\x7e\xfd\xae\x5d\xe5\x8f\x74\x1b\xfb\x56\x11\xf5\x07\xda\x65\x75\xb3\x0b\x23\xd9\xe0\xf1\x6a\xb5\x62\xf0\x8b\x88\xe3\x34\xf1\xb1\x79\xcc\x90\xe1\xfe\xa4\xd8\xb7\x68\x82\x53\x7d\x8e\xe2\x7d\x83\xe2\xcd\x60\x2c\xc5\xe6\x6d\x31\x2e\xb1\x00\x87\x3d\x72\xfa\x16\x05\xbd\x70\xfa\x28\x48\xfb\x6c\x3b\xb8\x2e\xad\x8a\x66\xf1\x58\x68\xe5\x7a\x37\xbb\x53\x64\x37\xf0\x38\xee\x70\xba\x39\x4b\x76\xc6\x6c\x1e\x5f\xb4\x0b\x05\x94\x12\xc2\x9e\x38\xe5\x81\xac\xd7\xa5\xd8\x0f\x70\x42\xf1\x37\xc1\xfd\x0d\xf3\xb1\x35\x27\x12\x2a\x17\xef\xe5\x39\x89\xfb\x82\xf6\x1a\x9e\xf8\x17\x2b\xda\x1a\xf6\x8b\xd5\x29\xed\x80\xf8\x77\xf5\x63\x80\xdb\x7f\xaf\x1d\x97\x82\x19\x1c\x97\x3a\x53\x84\x7d\xdb\x2c\x6b\x52\x9e\x35\x23\xec\x3b\xec\xbc\xe2\xf1\x36\xcb\x25\xe4\x71\xd6\x5c\x3b\xdd\xbc\x7b\x22\xc6\x2c\x7c\x2c\xfd\x7b\x8c\xbb\xae\x7f\x15\x7d\x8b\xe7\xd7\x86\x5e\x5c\x91\x7a\xaf\xc7\x45\x9c\x82\xf4\xe2\x49\xd2\xac\x09\x5c\xea\x97\xf2\x1a\x62\x7b\xb8\xdc\x8d\xd5\x55\xce\x85\xe7\xb3\xd7\xcf\x20\x7d\xb5\xbb\x4f\x0e\x8c\x1f\xd7\xf7\xa9\x5f\x5f\xdf\xe7\x62\xdc\xdc\x14\xb4\x84\xf5\x84\x76\x13\xc5\x75\x9f\xf0\x7d\x16\x01\x68\xc4\xc5\xd8\xd2\x05\xbf\x5e\x18\xe2\xd4\x78\x69\x9f\xeb\xbd\x96\xfd\x93\xec\x70\xeb\x91\x6d\x13\x3f\x05\x6d\x16\x2f\x6f\x3d\xae\x57\x6c\x13\xfb\x5a\xcd\xba\xe9\xf5\xcb\xa9\xea\x06\xf7\x57\xab\xe9\xd2\xaf\x52\x9c\xec\x22\x1a\xe4\xdf\xc9\x80\x78\xca\x75\x28\x17\xeb\x16\xa8\x5d\x7a\x9a\xfc\xfe\x86\xe4\xb0\xf4\xd8\x67\xf3\x4d\xf2\x2b\x13\x06\x5f\x93\x72\x1b\x31\x21\x17\xe5\x73\x7d\xa1\xe0\xb8\xa5\x43\xe2\xbe\x8b\xc1\x1b\x62\xbd\xe7\xde\xe3\xe7\xc4\x80\x38\x59\xad\x41\x71\xef\x5d\x8f\x8a\xba\xbb\xca\xe8\xeb\xb8\x2f\x54\x67\x17\x4e\x8b\x73\x24\xa8\x9e\x8c\xc3\xeb\xc9\x89\xc1\x9d\x76\x1e\xe2\x4d\x13\x8f\x53\x5d\xff\xcb\xfb\xed\xd6\xc7\x7f\x7d\xdf\x8f\xb5\xf7\xab\x87\xc7\xc7\xf5\xdb\xb2\xcd\x22\xf6\x59\x58\x8a\xc1\x7e\xaf\xea\xdd\xce\x3f\x7c\xe7\x34\x23\x7e\x3f\x1b\x64\xe7\x1d\xa2\x51\x8f\xed\x8a\x2b\xff\x37\x10\x6f\x59\x7c\xc7\xe2\x59\x8a\xf5\x84\xb5\x82\xf7\x3e\xbe\x0d\xf0\x5d\x80\x6f\x07\x7c\x37\xf0\x49\x10\x77\x2c\xde\xaf\x78\x07\x7b\xf8\x3d\x7c\x76\x1d\xdf\x3f\xf8\x36\xc2\x46\xf3\x78\x05\xad\x61\x5d\x92\x98\x76\xc3\x09\xbc\x97\x0a\xa4\x02\xcf\x70\x3c\xbf\xf1\xce\xc1\xfb\xa6\x2d\x88\x9a\x9c\xc7\x3b\x80\xdb\xac\xcc\x93\x3e\xc7\x38\x40\x1f\xe6\x16\xd6\x13\xd6\x1c\xd6\x1b\xb7\xd8\x23\x43\xcc\xaf\xea\x98\x9b\x62\xf5\xdc\xc2\x7c\x97\xf8\x3d\xe2\xdf\x11\xd8\x51\x7e\x64\xfc\x48\xb8\x9a\x74\x5f\x12\xfe\x9d\x82\x57\x09\xbf\x18\xf1\xe3\xfb\x84\xdf\x53\xf0\xc7\x84\x0f\x29\x72\x76\x09\xdf\x57\xf8\xbf\x27\x7c\x2c\xea\xc7\x6f\x11\xbe\xac\xe0\x1f\x12\xfe\x95\x82\xbf\x4f\xf8\x8e\x82\xff\x2c\x71\x3f\x0c\x7f\x10\x3e\x79\xc4\x8f\x3f\x24\x7c\x2d\xee\xc7\xbf\x25\xfc\x81\x82\xdf\x27\x7c\x4f\xc1\x0b\x84\x0f\x25\xfc\xf8\x22\xe1\xcb\x49\x3f\xfe\xb6\xb4\x53\xc1\xf7\x08\xff\x49\xc1\x6f\x12\x9e\x50\xf6\x77\x86\xf0\x0f\x14\x7c\x12\xf0\xfd\x14\x03\xb5\x65\x39\x1e\xef\xc0\xfb\x39\x1e\xe9\xc0\x33\xc4\x8a\xe2\xf1\x88\x4e\x25\xfd\x63\x18\x71\xcc\x1b\x0e\x8c\x54\x4d\x5b\x37\x1c\x6b\xa3\x3c\x6a\x95\x4b\x55\xb3\x56\x83\x15\xdb\x32\xcc\x72\xcd\x84\x91\x9a\x53\x75\xf4\x02\xa3\x5b\xeb\x48\xd7\xf5\x4a\x6d\x74\xf6\xbd\xd9\x77\xaf\x5c\x5e\x79\xe7\xcd\x05\x98\x9f\x9e\x1e\x5b\x79\x4d\x90\x09\x49\x27\x05\x1d\x27\x3a\xf1\x2a\x8d\x89\xe6\x89\x9e\x27\x98\x68\xfe\x3c\xb3\x64\xa3\xa8\x3b\x3a\x2a\xcd\x8f\xe4\x09\x9f\x78\x85\xe8\x39\xe2\x27\x9a\x27\x3a\x41\x64\x9c\xa6\x89\xe6\xe5\x38\x2f\xe8\xb9\x31\xe2\x23\x3a\x3e\xd6\x11\xaf\x7f\xda\xce\x00\x04\x44\x9d\xe5\xc1\x71\x70\x03\xed\x69\xea\x7f\x08\xf2\x7f\x05\x25\xad\xe9\xbf\x84\xce\xa6\x94\x0b\x1c\x3d\x64\xfd\xae\x92\x87\x4a\x7a\xf3\x4c\x4a\x06\xe8\x79\x48\xf6\x6b\x9e\x75\x11\xcf\xfa\x14\xd1\x09\xd2\xaf\xc6\x20\x45\x27\x61\x46\x71\x58\xb5\xff\x6b\x5a\x3f\xae\xe0\x63\xe2\x67\x1a\xbc\xa0\xac\x97\x7a\x25\x7c\xea\x00\xfd\x8b\xbd\xc1\xfa\xd4\xf8\xbf\x0c\xc1\xf7\xf9\x32\xad\xaf\x84\xdd\x75\x58\x2f\xd2\xff\x0c\xd1\xbf\x02\x00\x00\xff\xff\xbc\xb6\xe2\x03\x28\x12\x00\x00")

func tcptracerSockEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerSockEbpfO,
		"tcptracer-sock-ebpf.o",
	)
}

func tcptracerSockEbpfO() (*asset, error) {
	bytes, err := tcptracerSockEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-sock-ebpf.o", size: 4648, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-sock-ebpf.o": tcptracerSockEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-sock-ebpf.o": &bintree{tcptracerSockEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

