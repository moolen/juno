// Code generated by go-bindata.
// sources:
// ../../dist/tcptracer-sock-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerSockEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x58\x4d\x6c\x1b\xc5\x17\x7f\xfe\xaa\xed\x34\x6d\xdc\x28\xfe\xff\x5d\x97\x8f\x2d\x8d\xab\xf0\x91\x0f\x27\xa5\x84\x88\xa2\x92\x28\x44\x42\x81\x46\x69\x43\x23\x2e\x61\xbd\xde\x38\x4b\x37\x8e\x63\xaf\x69\xd3\x1c\xa0\x42\xe5\xe3\x06\x87\x5e\x7a\x6a\x25\x0e\xe5\x06\x5c\x1c\x4e\x86\x5b\x6f\xe4\xd8\x0b\x52\x85\x7a\xc8\x81\x03\xc7\x1c\x90\xcc\xbc\x99\x37\xde\xdd\xf1\xc6\x01\x89\x5b\x47\x72\xdf\xce\x6f\xde\xbc\xf7\x9b\x37\xef\xcd\x4c\xf3\xc9\xec\xfc\xdb\xe1\x50\x08\x64\x0b\xd1\x4f\x6d\x7b\x7d\xee\xf7\x45\xfa\x37\xc9\x34\x9b\xff\x13\x58\x86\x4d\x32\x9d\x29\x0d\xbf\x73\xc5\x1e\xd8\xce\x3e\x6a\x49\xbc\xb4\xe1\x70\xbc\xa2\x1b\xd7\xb6\xb3\xbb\x1c\xd7\x8d\x05\x3e\xaf\x79\x5f\xcc\x8f\x33\xbd\xdd\x56\xab\xd5\x08\x03\xa4\x58\xff\x36\xfb\x1d\x41\x3d\x5d\xe8\xe9\x85\x79\xa1\x3f\x48\xfa\x51\x80\xe3\x4c\x0e\x0f\xcc\xf2\xfe\x66\xae\x57\xc8\x33\xc7\xb8\x2c\x45\x00\x12\x4c\x5e\xba\x2c\xf4\xd3\x91\x10\x7c\xf9\x00\x60\x29\xf2\x22\xdc\x42\x3b\x39\xb2\x13\x03\xe8\x47\x3b\xe9\xb3\x62\xfe\x60\x8a\xec\x9c\xf0\xdb\x99\x91\x76\xc2\xdc\x4e\xf3\x8a\xe8\x2f\x45\x9e\x17\xf6\x34\xb2\xc7\x7e\x18\x12\x39\x3e\x9c\x3a\x45\x76\x07\xc8\x6e\xba\xbb\xdd\xa8\xb4\x3b\xd0\xc1\x33\x0b\xee\xf8\x70\x9a\x78\x0e\x66\xc8\xee\xc9\x7f\xc8\x37\xd9\xc1\xf7\x39\x1f\xdf\x18\xd9\x7d\x86\xec\x3e\x1b\x68\x57\xf2\xb8\xca\xf0\x56\x0b\xfd\x9c\xe5\xe3\x8d\x84\xd8\x97\x74\x64\x1a\x3e\xff\x0d\x40\x58\x63\x38\xdb\x5f\xbb\xde\x03\x46\x76\xaf\x9d\x17\x5a\xce\xae\xe3\xb7\x36\xaa\xe5\xb6\xb3\x8f\xdb\xb8\xb3\xa6\x39\xf8\xbd\x55\x31\xa7\xbc\x79\x54\x35\x1d\xae\x5f\x2d\x6b\xa6\xcc\xa3\xa0\xfc\x41\xe6\x0d\xe4\x97\x70\xf3\x28\x06\xbf\xb7\x79\x60\xab\x65\xff\x68\xc9\xbe\xc6\x12\xd6\xcb\xcb\xef\xdf\xe5\x55\xfe\x58\xb7\xf1\xdb\x2a\xa2\xff\x40\x5e\x56\x37\x5e\x18\xc9\x06\x8f\x57\xab\x15\x83\x5f\x45\x1c\xa7\x49\x8f\x8d\x63\x86\x0c\xf7\x27\xc5\xbe\x45\x13\x5c\xea\x73\x14\xef\x1b\x14\x6f\x06\x63\x29\x36\x6f\x8b\x7e\x89\x05\x38\xec\xb1\xd3\xb7\x28\xe4\x85\xd3\x47\x41\xf2\xb3\xed\xe0\xba\xb4\x2a\x9a\xc5\x63\xa1\x95\xeb\xdd\x78\xa7\x88\x37\xf0\x38\xee\x70\xb9\x39\x4b\x3c\x63\x36\x8f\x2f\xf2\x42\x03\xa5\x84\xe0\x13\xa7\x3c\x90\xf5\xba\x14\xfb\x11\x4e\x28\xeb\x4d\xf0\xf5\x86\x79\xdf\x9a\x13\x09\x95\x8b\xf7\xf2\x9c\xc4\x7d\x41\xbe\x86\x27\xfe\xc5\x8a\xb6\x86\xdf\xc5\xea\x94\x76\x40\xfc\xbb\xae\x63\x80\xf3\xbf\xd7\x8e\x4b\xc1\x0c\x8e\x4b\x9d\x39\xc2\x6f\xdb\x2c\x6b\xd2\x9e\x35\x23\xf8\x1d\x76\x5e\xf1\x78\x9b\xe5\x12\xea\x38\x6b\x2e\x4f\x37\xef\x9e\x88\x3e\x0b\x1f\x4b\xff\x1e\xe3\xae\xbb\xbe\x8a\xbe\xc5\xf3\x6b\x43\x2f\xae\x48\xbf\xd7\xe3\x22\x4e\x41\x7e\xf1\x24\x69\xd6\x04\x2e\xfd\x4b\x7b\x0d\xb1\x3d\xdc\xee\xc6\xea\x2a\xd7\xc2\xf3\xd9\xbb\xce\x20\x7f\xb5\xbb\x4f\x0e\x8c\x1f\xf7\xf7\x99\xdf\x5f\xdf\x17\xa2\xdf\xdc\x14\xb2\x84\xf5\x84\xbc\x49\xe2\xbc\x4f\xf9\x3e\x8b\x00\x34\xe2\xa2\x6f\xe9\x42\x5f\x2f\x0c\x71\x69\xbc\xb4\xcf\xfd\x5e\xcb\xfe\x45\x3c\xdc\x7a\x64\xdb\xc4\x4f\x41\x9b\xc5\xcb\x5b\x8f\xeb\x15\xdb\xc4\x6f\xad\x66\xdd\xf4\xae\xcb\xa9\xea\x06\x5f\xaf\x56\xd3\xe5\xba\x4a\x71\xe2\x45\x32\x68\x7d\x27\x03\xe2\x29\xe7\xa1\x5d\xac\x5b\xa0\x76\xe9\xff\xb4\xee\x6f\xc9\x0e\x4b\x8f\x7d\x36\xde\xa4\x75\x65\xc2\xe0\x6b\xd2\x6e\x23\x26\xec\xa2\x7d\xee\x2f\x14\x1c\xb7\x74\x48\xdc\x77\x31\x78\x53\xcc\xf7\xdc\x7b\xfc\x9c\x18\x10\x27\xab\x35\x28\xee\xbd\xeb\x51\x51\x77\x57\x99\x7c\x03\xf7\x85\xea\xec\xc2\x69\x71\x8e\x04\xd5\x93\x71\x78\x3d\x39\x31\xb8\xd3\xce\x43\xbc\x69\xe2\x71\xaa\xeb\xff\x78\xbf\xdd\xfa\x78\xda\xf7\xfd\x58\x7b\xbf\x7a\x78\x7c\xdc\x75\x5b\xb6\x59\xc4\x6f\x16\x96\x62\xf0\xba\x57\xf5\x6e\xe7\x1f\xbe\x73\x9a\x11\xff\x3a\x1b\xc4\xf3\x0e\xc9\xa8\x87\xfb\x2b\x41\x0f\xc1\xa7\xbc\xe1\x5b\x16\xdf\xb1\x78\x96\x62\x3d\x61\xad\xe0\xbd\x8f\x6f\x03\x7c\x17\xe0\xdb\x01\xdf\x0d\x7c\x10\xc4\x1d\x8b\xf7\x2b\xde\xc1\x1e\x7d\x8f\x9e\x5d\xc7\xf7\x0f\xbe\x8d\xb0\xd1\x38\x5e\x41\x6b\x58\x97\x64\xa6\xdd\x70\x00\xef\xa5\x02\xb9\xc0\x33\x1c\xcf\x6f\xbc\x73\xf0\xbe\x69\x1b\xa2\x26\xc7\xf1\x0e\xe0\x9c\x95\x71\xf2\xe7\x18\x07\xf8\xc3\xdc\xc2\x7a\xc2\x9a\xc3\x7a\xe3\x8c\x3d\x36\xc4\xf8\xaa\x8e\xb9\x29\x66\xcf\x2d\xcc\x77\x89\xdf\x23\xfe\x6f\x04\x76\x94\xdc\xfa\x89\x70\x50\xea\xe7\x2b\xc2\xbf\x57\xf0\x2a\xe1\x17\x23\x7e\x7c\x9f\xf0\x7b\x0a\xfe\x98\xf0\x21\xc5\xce\x2e\xe1\xfb\x8a\xfe\x0f\x84\x8f\x45\xfd\xf8\x2d\xc2\x97\x15\xfc\x23\xc2\xbf\x56\xf0\x0f\x08\xdf\x51\xf0\x5f\x24\xee\x87\xe1\x4f\xc2\x27\x8f\xf8\xf1\x87\x84\xaf\xc5\xfd\xf8\x77\x84\x3f\x50\xf0\xfb\x84\xef\x29\x78\x81\xf0\xa1\x84\x1f\x5f\x24\x7c\x39\xe9\xc7\xdf\x91\x3c\x15\x7c\x8f\xf0\x9f\x15\xfc\x26\xe1\x09\x65\x7f\x67\x08\xff\x50\xc1\x27\x01\xdf\x4f\x31\x50\x5b\x96\xe3\xf1\x0e\xbc\x9f\xe3\x91\x0e\x3c\x43\xaa\x68\x1e\x8f\xe8\x54\xd2\xdf\x87\x11\xc7\xbc\xe1\xc0\x48\xd5\xb4\x75\xc3\xb1\x36\xca\xa3\x56\xb9\x54\x35\x6b\x35\x58\xb1\x2d\xc3\x2c\xd7\x4c\x18\xa9\x39\x55\x47\x2f\x30\xb9\xb5\x8e\x72\x5d\xaf\xd4\x46\x67\xdf\x9f\x7d\xef\xca\xe5\x95\x77\xdf\x5a\x80\xf9\xe9\xe9\xb1\x95\xd7\x85\x98\x90\x72\x52\xc8\x71\x92\x13\xaf\x51\x9f\x64\x9e\xe4\x79\x82\x49\xe6\xcf\x33\x26\x1b\x45\xdd\xd1\xd1\x69\x7e\x24\x4f\xf8\xc4\xab\x24\xcf\x91\x3e\xc9\x3c\xc9\x09\x12\xe3\x34\x4c\x32\x2f\xfb\x79\x21\xcf\x8d\x91\x1e\xc9\xf1\xb1\x8e\x78\xfd\xdb\x76\x06\x20\x20\xea\x2c\x0f\x8e\x83\x1b\x68\x4f\x53\xaf\x0e\xf9\x77\x05\x25\xad\xe9\x6f\x09\x9d\x4d\x29\x17\x38\x7a\xc8\xfc\x5d\x25\x0f\x95\xf4\xe6\x99\x94\x0c\xf0\xf3\x90\xf8\x6b\x9e\x79\x11\xcf\xfc\x14\xc9\x09\xf2\xaf\xc6\x20\x45\x27\x61\x46\x59\xb0\xca\xff\x1b\x9a\x3f\xae\xe0\x63\xe2\xbf\x69\xf0\x82\x32\x5f\xfa\x95\xf0\xa9\x03\xfc\x2f\xf6\x06\xfb\x53\xe3\xff\x32\x74\x1c\xad\xbc\x2d\xd3\xfc\x4a\xd8\x9d\x87\xf5\x22\xd7\x9f\x21\xf9\x77\x00\x00\x00\xff\xff\x52\x96\x51\x17\x28\x12\x00\x00")

func tcptracerSockEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerSockEbpfO,
		"tcptracer-sock-ebpf.o",
	)
}

func tcptracerSockEbpfO() (*asset, error) {
	bytes, err := tcptracerSockEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-sock-ebpf.o", size: 4648, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-sock-ebpf.o": tcptracerSockEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-sock-ebpf.o": &bintree{tcptracerSockEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

