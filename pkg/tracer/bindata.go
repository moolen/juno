// Code generated by go-bindata.
// sources:
// ../../dist/tcptracer-sock-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerSockEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x4d\x6c\x1b\x45\x14\x7e\xfe\xab\xed\xf4\x27\x6e\x14\x83\xeb\xf2\xb3\xa5\x71\x15\x40\xf9\x71\x52\x4a\x88\x28\x0a\x89\x42\x24\x14\x68\x94\x36\x34\xe2\x12\xd6\xeb\x8d\xb3\x74\xe3\x38\xf6\x86\x36\xcd\x01\x2a\x54\x7e\x6e\x70\xe8\xa5\xa7\x56\xe2\x50\x6e\xc0\xc5\xe1\x64\xb8\xf5\x46\x8e\xbd\x20\x55\xa8\x87\x1c\x38\x70\xcc\x01\xc9\xcc\x9b\x79\xe3\xdd\x1d\xaf\x1d\x90\xb8\xc1\x48\xc9\xdb\xf9\xe6\xcd\x7b\xdf\xbc\x79\x6f\x66\x92\x8f\x67\xe7\xdf\x0a\x87\x42\x20\x5b\x88\x7e\xd4\xb6\xdf\xeb\x7e\x4f\xd1\xef\x24\xd3\x6c\x3c\x25\xb0\x0c\x9b\x64\x3a\x93\x1a\x7e\xe7\x8a\x3d\xb0\x93\x7d\xd4\x94\x78\x69\xc3\xe1\x78\x45\x37\xae\xed\x64\xf7\x38\xae\x1b\x0b\x7c\x5e\xe3\xbe\x98\x1f\x67\x7a\x7b\xcd\x66\xb3\x1e\x06\x48\xb1\xfe\x6d\xf6\x73\x04\xf5\x74\xa1\xa7\x17\xe6\x85\xfe\x00\xe9\x47\x01\x4e\x30\x39\xd4\x3f\xcb\xfb\x9b\xb9\x63\x42\x9e\x3d\xce\x65\x29\x02\x90\x60\xf2\xd2\x65\xa1\x9f\x8e\x84\xe0\x8b\x07\x00\x4b\x91\x17\xe1\x16\xda\xc9\x91\x9d\x18\x40\x1f\xda\x49\x9f\x13\xf3\x07\x52\x64\xe7\xa4\xdf\xce\x8c\xb4\x13\xe6\x76\x1a\x57\x44\x7f\x29\xf2\xbc\xb0\xa7\x91\x3d\xf6\x83\x21\x91\xe3\x43\xa9\xd3\x64\xb7\x9f\xec\xa6\xbb\xdb\x8d\x4a\xbb\xfd\x6d\x3c\xb3\xe0\x8e\x0f\xa5\x89\xe7\x40\x86\xec\x9e\xfa\x9b\x7c\x93\x6d\x7c\x9f\xf3\xf1\x8d\x91\xdd\x67\xc8\xee\xb3\x81\x76\x25\x8f\xab\x0c\x6f\x36\xd1\xcf\x39\x3e\x5e\x4f\x88\x7d\x49\x47\xa6\xe1\xb3\x5f\x01\x84\x35\x86\xb3\xfd\xb5\xb7\x7a\xc0\xc8\xee\xb7\xf2\x42\xcb\xd9\x5b\xf8\xad\x8d\x68\xb9\x9d\xec\xe3\x16\xee\xac\x69\x0e\x7e\x6f\x57\xcc\x49\x6f\x1e\x55\x4d\x87\xeb\x57\xcb\x9a\x29\xf3\x28\x28\x7f\x90\x79\x1d\xf9\x25\xdc\x3c\x8a\xc1\x6f\x2d\x1e\xd8\x6a\xd9\xdf\x9b\xb2\xaf\xb1\x84\xf5\xf2\xf2\xfb\x77\x79\x95\x3f\xd2\x6d\xfc\xb6\x8a\xe8\x3f\x90\x97\xd5\x8d\x17\x46\xb2\xce\xe3\xd5\x6c\xc6\xe0\x17\x11\xc7\x69\xd2\x63\xe3\x98\x21\x43\x7d\x49\xb1\x6f\xd1\x04\x97\xfa\x1c\xc5\xfb\x06\xc5\x9b\xc1\x58\x8a\x8d\xdb\xa2\x5f\x62\x01\x0e\x7b\xec\xf4\x2e\x0a\x79\xf1\xcc\x51\x90\xfc\x6c\x3b\xb8\x2e\xad\x8a\x66\xf1\x58\x68\xe5\xad\x6e\xbc\x53\xc4\x1b\x78\x1c\x77\xb9\xdc\x9c\x25\x9e\x31\x9b\xc7\x17\x79\xa1\x81\x52\x42\xf0\x89\x53\x1e\xc8\x7a\x5d\x8a\xfd\x00\x27\x95\xf5\x26\xf8\x7a\xc3\xbc\x6f\xcd\x89\x84\xca\xc5\x8f\xf1\x9c\xc4\x7d\x41\xbe\x86\x27\xfe\xc5\x8a\xb6\x86\xdf\xc5\xea\xa4\xd6\x21\xfe\x5d\xd7\xd1\xcf\xf9\xdf\x6b\xc5\xa5\x60\x06\xc7\x65\x8b\x39\xc2\x6f\xdb\x2c\x6b\xd2\x9e\x35\x23\xf8\x1d\x76\x5e\xf1\x78\x9b\xe5\x12\xea\x38\x6b\x2e\x4f\x37\xef\x9e\x88\x3e\x0b\x1f\x4b\xff\x1e\xe3\xae\xbb\xbe\x8a\xbe\xcd\xf3\x6b\x43\x2f\xae\x48\xbf\xd7\xe3\x22\x4e\x41\x7e\xf1\x24\x69\xd4\x04\x2e\xfd\x4b\x7b\x75\xb1\x3d\xdc\xee\xc6\xea\x2a\xd7\xc2\xf3\xd9\xbb\xce\x20\x7f\xb5\xbb\x4f\x3a\xc6\x8f\xfb\xfb\xd4\xef\xaf\xf7\x73\xd1\x6f\x6c\x0a\x59\xc2\x7a\x42\xde\x24\x71\xde\x27\x7c\x9f\x45\x00\xea\x71\xd1\xb7\x74\xa1\xaf\x17\x06\xb9\x34\x5e\x3a\xe0\x7e\xaf\x65\xff\x24\x1e\x6e\x3d\xb2\x6d\xe2\xa7\xa0\xcd\xe2\xe5\xad\xc7\xf5\x8a\x6d\xe2\xb7\x56\xb3\x6e\x7a\xd7\xe5\x54\x75\x83\xaf\x57\xab\xe9\x72\x5d\xa5\x38\xf1\x22\x19\xb4\xbe\x53\x01\xf1\x94\xf3\xd0\x2e\xd6\x2d\x50\xbb\xf4\x34\xad\xfb\x1b\xb2\xc3\xd2\xe3\x80\x8d\x37\x68\x5d\x99\x30\xf8\x9a\xb4\x5b\x8f\x09\xbb\x68\x9f\xfb\x0b\x05\xc7\x2d\x1d\x12\xf7\x5d\x0c\xde\x10\xf3\x3d\xf7\x1e\x3f\x27\xfa\xc5\xc9\x6a\x0d\x88\x7b\xef\x7a\x54\xd4\xdd\x55\x26\x5f\xc7\x7d\xa1\x3a\xbb\x78\x46\x9c\x23\x41\xf5\x64\x1c\x5e\x4f\x4e\x0c\xee\xb4\xf2\x10\x6f\x9a\x78\x9c\xea\xfa\x5f\xde\x6f\xb7\x3e\xfe\xeb\xfb\x7e\xbc\xb5\x5f\x3d\x3c\x3e\xee\xba\x2d\xdb\x2c\xe2\x37\x0b\x4b\x31\x78\xdd\xab\x7a\xb7\xf3\x0f\xdf\x39\x8d\x88\x7f\x9d\x75\xe2\x79\x87\x64\xd4\xc3\x7d\x0a\xfe\x6f\x6a\xc3\xb7\x2c\xbe\x63\xf1\x2c\xc5\x7a\xc2\x5a\xc1\x7b\x1f\xdf\x06\xf8\x2e\xc0\xb7\x03\xbe\x1b\xf8\x20\x88\x3b\x16\xef\x57\xbc\x83\x3d\xfa\x1e\x3d\x7b\x0b\xdf\x3f\xf8\x36\xc2\x46\xe3\x78\x05\xad\x61\x5d\x92\x99\x56\xc3\x01\xbc\x97\x0a\xe4\x02\xcf\x70\x3c\xbf\xf1\xce\xc1\xfb\xa6\x65\x88\x9a\x1c\xc7\x3b\x80\x73\x56\xc6\xc9\x9f\x63\x74\xf0\x87\xb9\x85\xf5\x84\x35\x87\xf5\xc6\x19\x7b\x6c\x88\xf1\x55\x1d\x73\x53\xcc\x9e\x5b\x98\xef\x12\xbf\x47\xfc\x77\x04\x76\x95\x3f\x32\x7e\x24\x1c\x94\xfa\xf9\x92\xf0\xef\x14\xbc\x4a\xf8\x54\xc4\x8f\x1f\x10\x7e\x4f\xc1\x1f\x13\x3e\xa8\xd8\xd9\x23\xfc\x40\xd1\xff\x9e\xf0\xd1\xa8\x1f\xbf\x45\xf8\xb2\x82\x7f\x48\xf8\x57\x0a\xfe\x3e\xe1\xbb\x0a\xfe\xb3\xc4\xfd\x30\xfc\x41\xf8\xc4\x11\x3f\xfe\x90\xf0\xb5\xb8\x1f\xff\x96\xf0\x07\x0a\x7e\x9f\xf0\x7d\x05\x2f\x10\x3e\x98\xf0\xe3\x8b\x84\x2f\x27\xfd\xf8\xdb\x92\xa7\x82\xef\x13\xfe\x93\x82\xdf\x24\x3c\xa1\xec\xef\x0c\xe1\x1f\x28\xf8\x04\xe0\xfb\x29\x06\x6a\xcb\x72\x3c\xde\x86\xf7\x71\x3c\xd2\x86\x67\x48\x15\xcd\xe3\x11\x9d\x4a\xfa\xfb\x30\xec\x98\x37\x1c\x18\xae\x9a\xb6\x6e\x38\xd6\x46\x79\xc4\x2a\x97\xaa\x66\xad\x06\x2b\xb6\x65\x98\xe5\x9a\x09\xc3\x35\xa7\xea\xe8\x05\x26\xb7\xd7\x51\xae\xeb\x95\xda\xc8\xec\x7b\xb3\xef\x5e\xb9\xbc\xf2\xce\x9b\x0b\x30\x3f\x3d\x3d\xba\xf2\x9a\x10\xe3\x52\x4e\x08\x39\x46\x72\xfc\x55\xea\x93\xcc\x93\xbc\x40\x30\xc9\xfc\x05\xc6\x64\xa3\xa8\x3b\x3a\x3a\xcd\x0f\xe7\x09\x1f\x7f\x85\xe4\x79\xd2\x27\x99\x27\x39\x4e\x62\x8c\x86\x49\xe6\x65\x3f\x2f\xe4\xf9\x51\xd2\x23\x39\x36\xda\x16\xaf\x7f\xda\xce\x02\x04\x44\x9d\xe5\xc1\x09\x70\x03\xed\x69\xea\xff\x10\xe4\xff\x15\x94\xb4\xee\x78\xc7\x28\xe5\x02\x47\x0f\x99\xbf\xa7\xe4\xa1\x92\xde\x3c\x93\x92\x01\x7e\x1e\x12\x7f\xcd\x33\x2f\xe2\x99\x9f\x22\x39\x4e\xfe\xd5\x18\xa4\xe8\x24\xcc\x28\x0b\x56\xf9\x7f\x4d\xf3\xc7\x14\x7c\x54\xfc\x99\x06\x2f\x28\xf3\xa5\x5f\x09\x9f\xee\xe0\x7f\xf1\x58\xb0\x3f\x35\xfe\x2f\x43\xdb\xd1\xca\xdb\x32\xcd\xaf\x84\xdd\x79\x58\x2f\x72\xfd\x19\x92\x7f\x05\x00\x00\xff\xff\xed\xc1\x84\xed\x28\x12\x00\x00")

func tcptracerSockEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerSockEbpfO,
		"tcptracer-sock-ebpf.o",
	)
}

func tcptracerSockEbpfO() (*asset, error) {
	bytes, err := tcptracerSockEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-sock-ebpf.o", size: 4648, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-sock-ebpf.o": tcptracerSockEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-sock-ebpf.o": &bintree{tcptracerSockEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

